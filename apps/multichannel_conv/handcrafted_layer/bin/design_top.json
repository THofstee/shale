{"top":"global.DesignTop",
 "namespaces":{
     "global":{
         "modules":{
             "DesignTop":{
                 "type":["Record",[
                      ["in",["Record",[["arg_0",["Array",2,["Array",1,["Array",1,["Array",16,"BitIn"]]]]]]]],
                      ["reset","BitIn"],
                      ["in_en",["Record",[["arg_0",["Array",2,["Array",1,["Array",1,"BitIn"]]]]]]],
                      ["out",["Array",1,["Array",1,["Array",1,["Array",16,"Bit"]]]]],
                      ["valid","Bit"]
                 ]],
                 "instances":{
                     "ub_weight":{
                         "genref":"commonlib.unified_buffer",
                         "genargs":{"width":["Int",16], "depth":["Int",16], "rate_matched":["Bool",false], "stencil_width":["Int",0], "iter_cnt":["Int",16], "dimensionality":["Int",1], "stride_0":["Int",1], "range_0":["Int",16], "stride_1":["Int",0], "range_1":["Int",0], "stride_2":["Int",0], "range_2":["Int",0], "chain_en":["Bool",false], "chain_idx":["Int",0], "output_starting_addrs":["Json",{"output_start":[0]}], "init":["Json",{"init":[0]}], "logical_size":["Json",{"capacity":[16]}]}
                     },
                     "ub_weight_flush":{
                         "modref":"corebit.const",
                         "modargs":{"value":["Bool",false]}
                     },
                     "ub_input":{
                         "genref":"commonlib.unified_buffer",
                         "genargs":{"width":["Int",16], "depth":["Int",16], "rate_matched":["Bool",false], "stencil_width":["Int",0], "iter_cnt":["Int",256], "dimensionality":["Int",2], "stride_0":["Int",1], "range_0":["Int",16], "stride_1":["Int",0], "range_1":["Int",16], "stride_2":["Int",0], "range_2":["Int",0], "chain_en":["Bool",false], "chain_idx":["Int",0], "output_starting_addrs":["Json",{"output_start":[0]}], "init":["Json",{"init":[0]}], "logical_size":["Json",{"capacity":[16]}]}
                     },
                     "ub_input_flush":{
                         "modref":"corebit.const",
                         "modargs":{"value":["Bool",false]}
                     },
                     "ub_output":{
                         "genref":"commonlib.unified_buffer",
                         "genargs":{"width":["Int",16], "depth":["Int",16], "rate_matched":["Bool",false], "stencil_width":["Int",0], "iter_cnt":["Int",16], "dimensionality":["Int",1], "stride_0":["Int",1], "range_0":["Int",16], "stride_1":["Int",0], "range_1":["Int",0], "stride_2":["Int",0], "range_2":["Int",0], "chain_en":["Bool",false], "chain_idx":["Int",0], "output_starting_addrs":["Json",{"output_start":[0]}], "init":["Json",{"init":[0]}], "logical_size":["Json",{"capacity":[16]}]}
                     },
                     "ub_output_flush":{
                         "modref":"corebit.const",
                         "modargs":{"value":["Bool",false]}
                     },

                     "accum_reg":{
                         "genref":"coreir.reg",
                         "genargs":{"width":["Int",16]},
                         "modargs":{"clk_posedge":["Bool",true], "init":[["BitVector",16],"16'hxxxx"]}
                     },

                     "mul":{
                         "genref":"coreir.mul",
                         "genargs":{"width":["Int",16]}
                     },
                     "add":{
                         "genref":"coreir.add",
                         "genargs":{"width":["Int",16]}
                     },
                     "relu":{
                         "genref":"commonlib.umax",
                         "genargs":{"width":["Int",16]}
                     },

                     "counter":{
                         "genref":"commonlib.counter",
                         "genargs":{"width":["Int",16], "min":["Int",0], "max":["Int",8], "inc":["Int",1]}
                     },
                     "matrix_counter":{
                         "genref":"commonlib.counter",
                         "genargs":{"width":["Int",16], "min":["Int",0], "max":["Int",15], "inc":["Int",1]}
                     },
                     "row_counter":{
                         "genref":"commonlib.counter",
                         "genargs":{"width":["Int",16], "min":["Int",0], "max":["Int",15], "inc":["Int",1]}
                     },

                     "init_output_value":{
                         "genref":"coreir.const",
                         "genargs":{"width":["Int",16]},
                         "modargs":{"value":[["BitVector",16],"16'h0000"]}
                     },
                     "relu_value":{
                         "genref":"coreir.const",
                         "genargs":{"width":["Int",16]},
                         "modargs":{"value":[["BitVector",16],"16'h0000"]}
                     },
                     "save_phase":{
                         "genref":"coreir.const",
                         "genargs":{"width":["Int",16]},
                         "modargs":{"value":[["BitVector",16],"16'h000f"]}
                     },
                     "zero_value":{
                         "genref":"coreir.const",
                         "genargs":{"width":["Int",16]},
                         "modargs":{"value":[["BitVector",16],"16'h0000"]}
                     },

                     "invalid_bit":{
                         "modref":"corebit.const",
                         "modargs":{"value":["Bool",false]}
                     },
                     "read_en":{
                         "modref":"corebit.const",
                         "modargs":{"value":["Bool",true]}
                     },

                     "prev_accum_value_mux":{
                         "genref":"coreir.mux",
                         "genargs":{"width":["Int",16]}
                     },
                     "accum_value_mux":{
                         "genref":"coreir.mux",
                         "genargs":{"width":["Int",16]}
                     },
                     "output_valid_mux":{
                         "modref":"corebit.mux"
                     },

                     "row_zero_selector":{
                         "genref":"coreir.eq",
                         "genargs":{"width":["Int",16]}
                     },
                     "counter_zero_selector":{
                         "genref":"coreir.eq",
                         "genargs":{"width":["Int",16]}
                     },
                     "matrix_zero_selector":{
                         "genref":"coreir.eq",
                         "genargs":{"width":["Int",16]}
                     },
                     "save_phase_selector":{
                         "genref":"coreir.eq",
                         "genargs":{"width":["Int",16]}
                     },
                     "output_phase_selector":{
                         "modref":"corebit.and"
                     },
                     "output_read_selector":{
                         "modref":"corebit.or"
                     },
                     "init_value_selector":{
                         "modref":"corebit.and"
                     }
                 },

                 "connections":[
                     ["self.in.arg_0.0.0.0","ub_input.datain0"],
                     ["self.in.arg_0.1.0.0","ub_weight.datain0"],
                     ["add.out","ub_output.datain0"],
                     ["ub_input_flush.out","ub_input.flush"],
                     ["ub_weight_flush.out","ub_weight.flush"],
                     ["ub_output_flush.out","ub_output.flush"],
                     ["ub_input.reset","self.reset"],
                     ["ub_weight.reset","self.reset"],
                     ["ub_output.reset","self.reset"],

                     ["save_phase_selector.in0","row_counter.out"],
                     ["save_phase_selector.in1","save_phase.out"],

                     ["self.in_en.arg_0.0.0.0","ub_input.wen"],
                     ["self.in_en.arg_0.1.0.0","ub_weight.wen"],
                     ["save_phase_selector.out","ub_output.wen"],

                     ["output_read_selector.out","ub_output.ren"],
                     ["read_en.out","ub_input.ren"],
                     ["ub_input.valid","ub_weight.ren"],

                     ["mul.in0","ub_weight.dataout0"],
                     ["mul.in1","ub_input.dataout0"],
                     ["add.in0","mul.out"],
                     ["add.in1","accum_value_mux.out"],

                     ["accum_reg.in","add.out"],

                     ["counter.reset","self.reset"],
                     ["counter.en","matrix_counter.overflow"],

                     ["matrix_counter.reset","self.reset"],
                     ["matrix_counter.en","row_counter.overflow"],

                     ["row_counter.reset","self.reset"],
                     ["row_counter.en","ub_input.valid"],

                     ["init_value_selector.in0","row_zero_selector.out"],
                     ["init_value_selector.in1","counter_zero_selector.out"],

                     ["row_zero_selector.in0","zero_value.out"],
                     ["row_zero_selector.in1","row_counter.out"],
                     ["counter_zero_selector.in0","zero_value.out"],
                     ["counter_zero_selector.in1","counter.out"],
                     ["matrix_zero_selector.in0","zero_value.out"],
                     ["matrix_zero_selector.in1","matrix_counter.out"],

                     ["prev_accum_value_mux.in0","accum_reg.out"],
                     ["prev_accum_value_mux.in1","ub_output.dataout0"],
                     ["prev_accum_value_mux.sel","row_zero_selector.out"],

                     ["accum_value_mux.in0","prev_accum_value_mux.out"],
                     ["accum_value_mux.in1","init_output_value.out"],
                     ["accum_value_mux.sel","init_value_selector.out"],

                     ["relu.in0","ub_output.dataout0"],
                     ["relu.in1","relu_value.out"],

                     ["output_phase_selector.in0","counter_zero_selector.out"],
                     ["output_phase_selector.in1","matrix_zero_selector.out"],

                     ["output_read_selector.in0","output_phase_selector.out"],
                     ["output_read_selector.in1","row_zero_selector.out"],

                     ["self.out.0.0.0","relu.out"],
                     ["output_valid_mux.in0","invalid_bit.out"],
                     ["output_valid_mux.in1","ub_output.valid"],
                     ["output_valid_mux.sel","output_phase_selector.out"],
                     ["self.valid","output_valid_mux.out"]
                 ]
             }
         }
     }
 }
}
